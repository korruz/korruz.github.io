<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>korruz</title>
  
  <subtitle>记录个人折腾前端的故事</subtitle>
  <link href="https://korruz.github.io/atom.xml" rel="self"/>
  
  <link href="https://korruz.github.io/"/>
  <updated>2022-01-09T13:20:25.537Z</updated>
  <id>https://korruz.github.io/</id>
  
  <author>
    <name>korruz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LAMP架构</title>
    <link href="https://korruz.github.io/2022/01/01/LAMP%E6%9E%B6%E6%9E%84/"/>
    <id>https://korruz.github.io/2022/01/01/LAMP%E6%9E%B6%E6%9E%84/</id>
    <published>2022-01-01T14:08:59.000Z</published>
    <updated>2022-01-09T13:20:25.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>谈到建立网站，总会看到 LAMP 这种典型架构，所以一直好奇，这些是如何配合在一起，为外部用户提供服务。</p><p>知乎上搜了一下，看了<a href="https://zhuanlan.zhihu.com/p/90006047">一篇文章</a> ，讲的挺好的。部分摘抄如下。</p><ul><li>L 代表服务器操作系统使用 Linux，服务器端常用的都是 Linux/Unix 衍生过来的。</li><li>A 代表网站服务使用的是 Apache 软件基金会中的 httpd 的软件</li><li>M 代表网站后台使用的数据库时 MySQL 数据库</li><li>P 代表网站是使用 PHP/Perl/Python 等语言开发</li></ul><span id="more"></span><p>主要分工如下图：</p><p><img src="/images/rJAgY2cCAvfQnnF7aee_K_GdP723ZZzv4ey4soFk_kU.jpg" alt="image"></p><h1 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h1><p>B站上找到了一篇关于实战的<a href="https://zhuanlan.zhihu.com/p/103216527">文章</a> 。我就用我之前在腾讯云买的主机试了试，感觉基本达到了我的目的了。</p><p>第一步：在网上找一下免费的网站源码，我随便找了<a href="https://www.php.cn/xiazai/code/7129#download-comment">一个</a> 。然后把文件解压到 <code>/var/www/html</code> 目录下。</p><p>第二步：安装 apache 的 httpd 服务，并开启服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd -y</span><br><span class="line">service httpd start</span><br></pre></td></tr></table></figure><p>第三步：输入主机 ip ，就会显示出网页内容。若仅显示 html/css 等静态文件，到这步后，在浏览器输入主机ip，就可以看到网页内容了。</p><p>第四步：若想要能够实现动态内容或者实现更加复杂的功能的话，可以使用 php 作为连接前端的后端语言。安装 php，然后就开始写 php 代码了，这里如何写 php 就不详细展开了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php -y</span><br></pre></td></tr></table></figure><p>第五步：一般作为测试，可以不用数据库，但是想要由数据存储功能，则最好弄一个数据库。然后将数据库嵌入到 php 到。也就是用 php 来操作 mysql 来管理数据。如何连接数据库，这里也涉及 php 编码，这里了解就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php-mysql -y</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这么看上去 LAMP 架构其实也不是很难，就是刚开始看上去陌生的名词看的有些复杂。有时也看到过 LNMP 架构，他这里用 N(Nginx) 代替了 A(Apache)，其实整体运行逻辑没有太大的变化。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;初识&quot;&gt;&lt;a href=&quot;#初识&quot; class=&quot;headerlink&quot; title=&quot;初识&quot;&gt;&lt;/a&gt;初识&lt;/h1&gt;&lt;p&gt;谈到建立网站，总会看到 LAMP 这种典型架构，所以一直好奇，这些是如何配合在一起，为外部用户提供服务。&lt;/p&gt;
&lt;p&gt;知乎上搜了一下，看了&lt;a href=&quot;https://zhuanlan.zhihu.com/p/90006047&quot;&gt;一篇文章&lt;/a&gt; ，讲的挺好的。部分摘抄如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L 代表服务器操作系统使用 Linux，服务器端常用的都是 Linux/Unix 衍生过来的。&lt;/li&gt;
&lt;li&gt;A 代表网站服务使用的是 Apache 软件基金会中的 httpd 的软件&lt;/li&gt;
&lt;li&gt;M 代表网站后台使用的数据库时 MySQL 数据库&lt;/li&gt;
&lt;li&gt;P 代表网站是使用 PHP/Perl/Python 等语言开发&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Init My Blog</title>
    <link href="https://korruz.github.io/2021/12/31/InitMyBlog/"/>
    <id>https://korruz.github.io/2021/12/31/InitMyBlog/</id>
    <published>2021-12-31T03:13:59.000Z</published>
    <updated>2022-01-09T13:17:40.351Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要讲述这个 Page 的来源及目的</p></blockquote><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>时至今日，今天个人建站还是选择 WordPress 和像 Hexo 等一些易上手的方式。</p><p>不知道为啥，我选择了 Hexo ，可能是因为 WordPress 太简单了吧。</p><span id="more"></span><h1 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h1><p>在B站上搜了一下，发现很多人发布了关于 Hexo 建站的视频，甚至是一步一步的演示。我也看了几个，后面跟着操作遇到问题时，才想到看官方文档:cry:。在这过程中主要遇到两个问题。</p><h2 id="config-cml-配置错误"><a href="#config-cml-配置错误" class="headerlink" title="_config.cml 配置错误"></a>_config.cml 配置错误</h2><p>官方文档上也有说，我照着配了，但是可能因为第二个问题，导致我怀疑了文档，尝试了弹幕的方法，发现是可以的，我的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:korruz/korruz.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>主要问题在于 repo 和 branch。repo 写 SSH 的链接也是没问题的。branch 这里注意要在 github 创建 repo 的时候，记得勾上添加README，因为这样能够有一个 <code>main</code> 分支，不然这里不知道填啥，自己但是在这里尝试了 <code>master</code> 和 <code>gh-page</code> ，没有效果。</p><h2 id="git-上传失败"><a href="#git-上传失败" class="headerlink" title="git 上传失败"></a>git 上传失败</h2><p>这个问题真的令人可憎，困惑了很久，因为报错信息仅仅是说连接不上，权限不允许。但是我按照 git 初始化操作来，都没有发应。后面在晚上发现了一篇帖子，说 github 22 端口拒绝访问，可以使用 443 端口，然后就根据帖子知道，在 .ssh 文件夹下建立 config 文件，注意这个文件是没有后缀的，文件管理器记得开启显示后缀，然后就好了。</p><h1 id="Hexo-主题"><a href="#Hexo-主题" class="headerlink" title="Hexo 主题"></a>Hexo 主题</h1><p>去主题商店看了几个，浏览过程中，发现维护较好的，而且看的过去的，就选择了 hexo-next 主题了，感觉还不错。</p><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>这个 Page 主要用来记录一下折腾前端的事情吧，目前能够写文字就好了，等折腾好了，把页面和功能装饰一下。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要讲述这个 Page 的来源及目的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h1&gt;&lt;p&gt;时至今日，今天个人建站还是选择 WordPress 和像 Hexo 等一些易上手的方式。&lt;/p&gt;
&lt;p&gt;不知道为啥，我选择了 Hexo ，可能是因为 WordPress 太简单了吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo theme" scheme="https://korruz.github.io/tags/hexo-theme/"/>
    
  </entry>
  
</feed>
